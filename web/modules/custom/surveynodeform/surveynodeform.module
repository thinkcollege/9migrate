<?php
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\SafeMarkup;
use Drupal\Core\Config\ConfigFactoryInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\UserSession;
use Drupal\user\Entity\User;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Core\Session\AccountProxyInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\InvokeCommand;
use Drupal\Core\Ajax\HtmlCommand;
use \Drupal\Core\Ajax\InsertCommand;
use Drupal\Core\Messenger\MessengerInterface;
use Drupal\Core\Language\Language;
use Drupal\node\NodeInterface;
error_reporting(E_ALL);
ini_set('display_errors', 1);
function surveynodeform_permission() {
  return array(
    'surveynodeform module' => array(
      'title' => t('Survey node form permission'),
  ));
}



function surveynodeform_query_alter($query) {
  $moduleHandler = \Drupal::service('module_handler');
  if ($query->hasTag('efq_debug') && $moduleHandler->moduleExists('devel')) {
    //dpm((string) $query);
    //dpm($query->arguments());
  }
}


function surveynodeform_get_prov_id($nid,$type) {
  $query = \Drupal::entityQuery('node');
    $query->condition('bundle', "$type")
      ->condition('entity_id', $nid, '=')
      ->condition('status', NodeInterface::PUBLISHED)
      ->execute();
      $result = $query->execute();
      if (!isset($result['node'])) { return; }
        else {
        $datanode = array_keys($result['node']);
    $mdind = \Drupal\node\Entity\Node::load()($datanode[0]);
    $provid = $mdind->og_group_ref[surveynodeform][0]['target_id'];
    return $provid;
  }
}
function surveynodeform_get_curr_rep_per($stateid) {
  $state = \Drupal\node\Entity\Node::load()($stateid);
  $current_reporting_period_nid = $state->field_current_reporting_period['und'][0]['target_id'];
  return $current_reporting_period_nid;
}

function surveynodeform_provider_statename($provid) {
  $query = \Drupal::entityQuery('node');
  $query->condition('bundle', "provider")
      ->condition('entity_id', $provid)
      ->condition('status', NodeInterface::PUBLISHED);

      $results = $query->execute();
      $provnode = array_keys($results['node']);
      $provgroup = \Drupal\node\Entity\Node::load()($provnode[0]);
      $stateid = $provgroup->og_group_provider_state_ref['und'][0]['target_id'];
      $query2 = \Drupal::entityQuery('node');
      $query2->condition('bundle', "state")
          ->condition('entity_id', $stateid)
          ->condition('status', NodeInterface::PUBLISHED);
      $results2 = $query2->execute();
      $statenode = array_keys($results2['node']);
      $stategroup = \Drupal\node\Entity\Node::load()($statenode[0]);
      $statename = array($stategroup->title,$stategroup->nid);
  return $statename;
}
//new state: workaround to get state node id
function get_state_id($state) {
  $query = \Drupal::entityQuery('node');
  $result = $query
    ->condition('type', 'state')
    ->condition('title', $state)
    ->execute();

    $nids = array();
  if (isset($result['node'])) {
      $nids = array_keys($result['node']);

    return $nids[0];
  }

}


// new state: duplicate surveynodeform_xx_prov_sum_results function


function surveynodeform_preprocess_node(&$vars){
  global $nid;
  $current_path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $current_path);
    if ($path_args[0] == 'node' && is_numeric($path_args[1]))   $nid = $path_args[1];



}



/*function surveynodeform_og_delete_form_alter(&$form, &$form_state, $form_id) {



  if ($form_id == 'og-ui-delete-membership' ) {

      $form['actions']['submit']['#submit'][] = 'surveynodeform_og_delete_form_redirect';
    } else {
      return;
    }
} */

function surveynodeform_og_delete_form_redirect($form, &$form_state) {
  $current_path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $current_path);
  if ($path_args[1] == 'node' && is_numeric($path_args[2]))   {

    $provid = $path_args[2];
    $ogid = $path_args[6];
    $indnodeid = surveynodeform_get_og_membership_entity_id($ogid);
    $url = \Drupal::request()->query->all();
    $reportingperiod_id = $path_args[8];

    $indnode = \Drupal\node\Entity\Node::load()($indnodeid);

   if($indnode->field_cie_individual && $indnode->field_cie_individual['und'][0]['value'] == '1') {
      $destination = "provider/$provid/individuals-cie/$reportingperiod_id";
    } else
    {
      $destination = "provider/$provid/individuals/$reportingperiod_id";
    }
    $form_state['redirect'] = $destination;
  }

}

function surveynodeform_individual_data_ga_node_form_submit($form, &$form_state) {


  $individual_id = $form_state['values']['field_individual']['und'][0]['target_id'] ;

  if($individual_id) {
    $individual_node = \Drupal\node\Entity\Node::load()($individual_id);
    $node_wrapper = entity_metadata_wrapper('node', $individual_node);






    $now = new DateTime( );

    $thismonth = $now->format("Y-m-d");
    $nextmonth = new DateTime("$thismonth + 1 month");

    $nextmonthdate = $nextmonth->format('Y-m-01 00:00:00');

    $insertdate = strtotime($nextmonthdate);

    if($form_state['values']['field_indv_final_month']['und'][0]['value'] == 'Yes') {



        $node_wrapper->revision->set(1);
        $node_wrapper->field_date_of_entry_into_ende->set($insertdate);
        $node_wrapper->save();



    }
    else {


      $extended = $individual_node->field_date_of_entry_into_ende['und'][0]['value'] ? $individual_node->field_date_of_entry_into_ende['und'][0]['value']: null;
      $node_wrapper->field_date_of_entry_into_ende->set(NULL);
      $node_wrapper->save();

    }
  }

}



function surveynodeform_profile_form_submit($form, &$form_state)
{
  $form_state['redirect'] = 'home';
}

function surveynodeform_form_alter(&$form, &$form_state, $form_id) {
  global $nid;
  $current_path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $current_path);
  if ($path_args[0] == 'node' && is_numeric($path_args[1]))
  { $nid = $path_args[1];
    $datanode = \Drupal\node\Entity\Node::load()($nid);
  }
  $form['#attributes']['class'][] = 'clearfix';
  $url = \Drupal::request()->query->all();
  $reportingperiod_id = $url && $url['rp'] ? $url['rp'] : $datanode->field_reporting_period['und'][0]['target_id'];

  if($form_id == 'provider_node_form') {
    global $theme;
    $stateid = $datanode->og_group_provider_state_ref['und'][0]['target_id'];



    if($theme == 'statedata_boot') {
        $url = \Drupal::request()->query->all();
        $form['#attached']['library'][] = 'surveynodeform/surveynodeform.library';
        $urlslug ="";
        if($url['status'] && $url['status'] == 'final' && $stateid != '116038') {

          $form['#prefix']= "<h3>Are you sure you are ready to submit your user data?</h3><p>You will no longer be able to edit individuals or data after you submit this form.  Please make sure the contact information below is correct, then select the submit button if you are ready. <a href=\"/provider/" . $path_args[1] . "/individuals/$reportingperiod_id\">Back to list of individuals</a></p>";
        }
        elseif( $url['status'] && $url['status'] == 'final' && $stateid = '116038')
        {
          $form['#prefix']= "<h3>Are you sure you are ready to submit your non-CIE user data?</h3><p>You will no longer be able to edit non-CIE individuals or data after you submit this form.  Please make sure the contact information below is correct, then select the submit button if you are ready. <a href=\"/provider/" . $path_args[1] . "/individuals/$reportingperiod_id\">Back to list of non-CIE individuals</a></p>";
        }
        elseif ($url['status'] && $url['status'] == 'final-cie') {

          $form['#prefix']= "<h3>Are you sure you are ready to submit your CIE user data?</h3><p>You will no longer be able to edit CIE individuals or data after you submit this form.  Please make sure the contact information below is correct, then select the submit button if you are ready. <a href=\"/provider/" . $path_args[1] . "/individuals-cie/$reportingperiod_id\">Back to list of CIE individuals</a></p>";

        }

      if(($url['status'] && $url['status'] == 'final') || ($url['status'] && $url['status'] == 'final-cie')) {
      $form['actions']['submit']['#value'] = 'Final submit';

        $form['actions']['submit']['#submit'][] = 'surveynodeform_node_form_redirect';
       }
    }


  }

  if($form_id == 'user_profile_form')
  {
    $form['#submit'][] = 'surveynodeform_profile_form_submit';
  }

  if ($form_id == 'individual_data_node_form') {
    $form['field_indv_comp_hrs']['und'][0]['value']['#attributes']['class'][]= 'checkHours';
    $form['field_indv_cont_hrs']['und'][0]['value']['#attributes']['class'][]= 'checkHours';
    $form['field_grp_integ_hrs']['und'][0]['value']['#attributes']['class'][]= 'checkHours';
    $form['field_shl_hrs']['und'][0]['value']['#attributes']['class'][]= 'checkHours';
    $form['field_indv_comp_gross_wages']['und'][0]['value']['#attributes']['class'][]= 'checkWages';
    $form['field_indv_cont_gross_wages']['und'][0]['value']['#attributes']['class'][]= 'checkWages';
    $form['field_grp_integ_gross_wages']['und'][0]['value']['#attributes']['class'][]= 'checkWages';
    $form['field_shl_gross_wages']['und'][0]['value']['#attributes']['class'][]= 'checkWages';
  } elseif($form_id == 'individual_data_ma_node_form')
  {
  $form['field_indv_comp_hrs']['und'][0]['value']['#attributes']['class'][]= 'checkHours';
  $form['field_grp_integ_hrs']['und'][0]['value']['#attributes']['class'][]= 'checkHours';
  $form['field_indv_comp_gross_wages']['und'][0]['value']['#attributes']['class'][]= 'checkWages';
  $form['field_grp_integ_gross_wages']['und'][0]['value']['#attributes']['class'][]= 'checkWages';

    //new state: add checks
  } elseif($form_id == 'individual_data_ga_node_form') {
    global $user;
    $extendedstart = false;

    if (!in_array('administrator', $user->roles) && in_array('GA Admin', $user->roles)) {
        $form['#attributes']['class'][] = 'gaAdminHide';
    }


    $individual_id = $datanode->field_individual['und'][0]['target_id'];
    $individual_node = \Drupal\node\Entity\Node::load()($individual_id);

    $reportingperiod_id = $datanode->field_reporting_period['und'][0]['target_id'];
    $reporting_period_node = \Drupal\node\Entity\Node::load()($reportingperiod_id);
    $cieperiod = $reporting_period_node->field_georgia_cie['und'][0]['value'] == 1 ? true : false;
    $cie_individual = $individual_node->field_cie_individual['und'][0]['value'] == 1 ? true : false;
    if($cie_individual) {
      $extended = $individual_node->field_date_of_entry_into_ende['und'][0]['value'] ? $individual_node->field_date_of_entry_into_ende['und'][0]['value']: null;
     // $testing = $individual_node->field_date_of_entry_into_ende['und'][0];
      //print_r($testing);
      //dpm($extended);



      if($extended) $extendedvalue = new DateTime( $extended  );

      $now = new DateTime(  );
      $nowshow = $now->format('Y-m-d H:i:s');
      //echo "<br />Now: $nowshow";
      if($extended && $extendedvalue <= $now) {

       $form['#attributes']['class'][] = 'showExtended';
      } else {
        $form['#attributes']['class'][] = 'showInitial';


      }
      if(!$extended || $extendedvalue >= $now) {

        $form['#submit'][] = 'surveynodeform_individual_data_ga_node_form_submit';
      }


    }

    if($cie_individual && !$cieperiod) {
      $form['#attributes']['class'][] = 'nonCiePeriod';

      unset($form['#groups']['group_indv_comp']);
      unset($form['#fieldgroups']['group_indv_comp']);
    } elseif ($cie_individual && $cieperiod) {
      unset($form['#groups']['group_indv_comp']);
      unset($form['#fieldgroups']['group_indv_comp']);

      unset($form['#groups']['group_grp_integ']);
      unset($form['#fieldgroups']['group_grp_integ']);

      unset($form['#groups']['group_self_emp']);
      unset($form['#fieldgroups']['group_self_emp']);

      unset($form['#groups']['group_shl']);
      unset($form['#fieldgroups']['group_shl']);

      unset($form['#groups']['group_com_non_work']);
      unset($form['#fieldgroups']['group_com_non_work']);

      unset($form['#groups']['group_fac_non_work']);
      unset($form['#fieldgroups']['group_fac_non_work']);
    } elseif
    ($cie_individual && $cieperiod) {
      $form['#attributes']['class'][] = 'ciePeriod';
    }
     else
    {
      unset($form['#groups']['group_cie']);
      unset($form['#fieldgroups']['group_cie']);
    }
    $form['field_indv_comp_hrs']['und'][0]['value']['#attributes']['class'][]= 'checkHours';
    $form['field_grp_integ_hrs']['und'][0]['value']['#attributes']['class'][]= 'checkHours';
    $form['field_shl_hrs']['und'][0]['value']['#attributes']['class'][]= 'checkHours';
    $form['field_indv_comp_gross_wages']['und'][0]['value']['#attributes']['class'][]= 'checkWages';
    $form['field_grp_integ_gross_wages']['und'][0]['value']['#attributes']['class'][]= 'checkWages';
    $form['field_shl_gross_wages']['und'][0]['value']['#attributes']['class'][]= 'checkWages';

  }
  if ($form_id == 'og_ui_delete_membership' ) {
    $urlslug = "";
    $url = \Drupal::request()->query->all();
    $reportingperiod_id = $url['rp'] ? $url['rp'] : $path_args[8];
    if ($path_args[1] == 'node' && is_numeric($path_args[2]))   $provid = $path_args[2];
    $ogid = $path_args[6];
    $indnodeid = surveynodeform_get_og_membership_entity_id($ogid);
    $indnode = \Drupal\node\Entity\Node::load()($indnodeid);
    if($indnode->field_cie_individual && $indnode->field_cie_individual['und'][0]['value'] == '1') $urlslug .= "-cie";
    $form['actions']['cancel'] = array(
      '#type'   => 'markup',
      '#markup' => '<div class="form-cancel-button-wrapper">' . l(t("Cancel"), "/provider/$provid/individuals/$reportingperiod_id$urlslug", array('attributes' => array('class' => array('form-cancel-button')))) . '</div>',
    );
    $form['#submit'][] = 'surveynodeform_og_delete_form_redirect';

    }
    //new site: for georgia: hide Individual is in CIE category	field_cie_individual from non-georgia users in Individual node form
    if ($form_id == 'individual_node_form')
    {
      global $user;

      //if (!in_array('administrator', $user->roles) && !in_array('Survey administrator', $user->roles) && !in_array('GA Admin', $user->roles)) {
      //  $form['field_cie_individual']['#access'] = FALSE;
        //$form['field_date_of_entry_into_ende']['#access'] = FALSE;
     // }
    }
  //new state: add node form id
  if ($form_id == 'individual_data_node_form' || $form_id == 'individual_data_ma_node_form' || $form_id == 'individual_data_ga_node_form' || $form_id == 'individual_node_form')
  {
    $form['field_indv_data_partic_why']['und']['#title'] = t('You have checked all the "did not participate" boxes on this form. Why didn\'t this individual participate in an activity? <br />(<span class="redUl">If this individual has been discharged or is deceased, please delete this individual from your list.</span>)');
   $url = \Drupal::request()->query->all();
   $urlp = print_r($url,true);
   watchdog('get urlp','URL p: ' . $urlp);

    if ($form_id == 'individual_node_form' && isset($url['p'])) {
      $provid = $url['p'];
      $statearray = surveynodeform_provider_statename($url['p']);
      $statename = $statearray[0];
      $statetid = getTidByName($statename);
      $form['#attached']['library'][] = 'surveynodeform/surveynodeform.' . $statename . '.library';

    } elseif ($form_id == 'individual_node_form' &&  !isset($url['p']))
    {
      if($url['destination']) {
        $destarray = explode('/', $url['destination']);
        $provid = $destarray[1];
        $reportingperiod_id = $destarray[3];
        watchdog('reporting period id: ', 'reporting id: ' . $reportingperiod_id);
      } else
      {
        $provid =  surveynodeform_get_prov_id($nid,'individual');
      }
      watchdog('provider id ', 'provider id: ' . $provid);
      $statearray = surveynodeform_provider_statename($provid);
      $statename = $statearray[0];
      $statetid = getTidByName($statename);
      watchdog('state name and state id: ', $statename . " " .  $statetid);
      $form['#attached']['library'][] = 'surveynodeform/surveynodeform.' . $statename . '.library';
    }
    else
    {  // set form_id
    // new state: set form id to choose stylesheet and js
      switch ($form_id) {
        case 'individual_data_node_form':
          $provtext = 'individual_data';
        break;
        case 'individual_data_ma_node_form':
        $provtext = 'individual_data_ma';
        break;
        case 'individual_data_ga_node_form':
          $provtext = 'individual_data_ga';
        break;
      }
      $provid =  surveynodeform_get_prov_id($nid,$provtext);


      $statearray = surveynodeform_provider_statename($provid);
      $statename = $statearray[0];
      $statetid = getTidByName($statename);
     // if($datanode->field_cie_individual_yes_no && $datanode->field_cie_individual_yes_no['und'][0]['value'] == '1') $statename = 'GeorgiaCIE';
        $form['#attached']['library'][] = 'surveynodeform/surveynodeform.library';
        $form['#attached']['library'][] = 'surveynodeform/surveynodeform.' . $statename . '.library';


    }
    parse_str(parse_url($_SERVER['HTTP_REFERER'], PHP_URL_QUERY), $queries);
    $urlappend = '';
    $urlappend = isset($queries['items_per_page']) ? '?items_per_page=' . $queries['items_per_page'] : '';
    $urlappend .= isset($queries['page']) ? ( $queries['items_per_page'] ? '&page=' . $queries['page'] : '?page=' . $queries['page']) : '';
    $urlappend .= isset($queries['order']) ? '&order=' . $queries['order'] : '';
    $urlappend .= isset($queries['sort']) ? '&sort=' . $queries['sort'] : '';
    $url = \Drupal::request()->query->all();
    if($url['rp']) $reportingperiod_id = $url['rp'];
    if($datanode && $datanode->field_cie_individual_yes_no && $datanode->field_cie_individual_yes_no['und'][0]['value'] == '1')
    {
      $form['#prefix']= "<h4>&lt;&lt; <a class=\"backLink\" href=\"/provider/$provid/individuals-cie/$reportingperiod_id$urlappend\">Back to list of CIE individuals</a> &lt;&lt;</h4><h4><a href=\"#edit-submit\">Be sure to save before leaving this page <img src=\"/sites/all/modules/custom/surveynodeform/img/down-arrow.png\" alt=\"down arrow\" width=\"25\" height=\"25\" /></a></h4>";

    }
    else
    {
      $form['#prefix']= "<h4>&lt;&lt; <a class=\"backLink\" href=\"/provider/$provid/individuals/$reportingperiod_id$urlappend\">Back to list of individuals</a> &lt;&lt;</h4><h4><a href=\"#edit-submit\">Be sure to save before leaving this page <img src=\"/sites/all/modules/custom/surveynodeform/img/down-arrow.png\" alt=\"down arrow\" width=\"25\" height=\"25\" /></a></h4>";
    }
    $queries = array();
    parse_str(parse_url($_SERVER['HTTP_REFERER'], PHP_URL_QUERY), $queries);
    // print_r($queries);

    $url = \Drupal::request()->query->all();

    if ($url && $url['destination']) {
      $destination = $url['destination'];
      $form['#action'] = "?destination=$destination$urlappend";

    }
    elseif($url['delete'] && $url['provnum'])
    {
      $form['actions']['submit']['#submit'][] = 'surveynodeform_node_form_redirect';
    }
    else
    {

      if($form['nid']['#value']) {
        // Form stays in edit mode on submit

          $form['#action'] = '?destination=node/' . $form['nid']['#value'] . '/edit';
      } elseif (!$form['nid']['#value'] && $form_id == 'individual_node_form')
      {
          $form['actions']['submit']['#submit'][] = 'surveynodeform_node_form_redirect';

      }

    }

      //new site: add settings
      // MA variables
      $settings['mamin'] = \Drupal::state()->get('surveynodeform_maminwage');
      $settings['mahrlow'] = \Drupal::state()->get('surveynodeform_mahrlow');
      $settings['mahrhigh'] = \Drupal::state()->get('surveynodeform_mahrhigh');
      $settings['mawagelow'] = \Drupal::state()->get('surveynodeform_mawagelow');
      $settings['mawagehigh'] = \Drupal::state()->get('surveynodeform_mawagehigh');
      $settings['maselfearnhigh'] = \Drupal::state()->get('surveynodeform_maselfearnhigh');
      $settings['maselfexpensehigh'] = \Drupal::state()->get('surveynodeform_maselfexpensehigh');
      //MD variables
      $settings['mdmin'] = \Drupal::state()->get('surveynodeform_mdminwage');
      $settings['mdhrlow'] = \Drupal::state()->get('surveynodeform_mdhrlow');
      $settings['mdhrhigh'] = \Drupal::state()->get('surveynodeform_mdhrhigh');
      $settings['mdwagelow'] = \Drupal::state()->get('surveynodeform_mdwagelow');
      $settings['mdwagehigh'] = \Drupal::state()->get('surveynodeform_mdwagehigh');
      $settings['mdselfearnhigh'] = \Drupal::state()->get('surveynodeform_mdselfearnhigh');
      $settings['mdselfexpensehigh'] = \Drupal::state()->get('surveynodeform_mdselfexpensehigh');
      //GA variables
      // New state: add settings
      $settings['gamin'] = \Drupal::state()->get('surveynodeform_gaminwage');
      $settings['gahrlow'] = \Drupal::state()->get('surveynodeform_gahrlow');
      $settings['gahrhigh'] = \Drupal::state()->get('surveynodeform_gahrhigh');
      $settings['gawagelow'] = \Drupal::state()->get('surveynodeform_gawagelow');
      $settings['gawagehigh'] = \Drupal::state()->get('surveynodeform_gawagehigh');
      $settings['gaselfearnhigh'] = \Drupal::state()->get('surveynodeform_gaselfearnhigh');
      $settings['gaselfexpensehigh'] = \Drupal::state()->get('surveynodeform_gaselfexpensehigh');

    //new state: add form id
    if(($form_id == 'individual_data_node_form' || $form_id == 'individual_data_ma_node_form' || $form_id == 'individual_data_ga_node_form') && !isset($url['delete']) && !isset($url['provnum']) ) {  $form['#attached']['library'][] = 'surveynodeform/surveynodeform.library'; }
    if(($form_id == 'individual_data_node_form' || $form_id == 'individual_data_ma_node_form' || $form_id == 'individual_data_ga_node_form')  && isset($url['delete']) && isset($url['provnum'])) { $form['#attached']['library'][] = 'surveynodeform/deletereason.library'; ;
    $form['#prefix']= "<h3>Explain your reason for deleting this individual in the form below and hit \"Next step,\" then finish deleting on the next page.</h3>";
    $form['actions']['submit']['#value'] = 'Next step';
    $form['actions']['submit']['#attributes'] = array('class' => array('btn','btn-primary'));
  }

    if (!path_is_admin(current_path())) {
      //  drupal_add_js(array('surveynodeform' => array('mdmin' => $mdminimum)), array('type' => 'setting'));

      //drupal_add_js(array('surveynodeform' => array('mdmin' => $settings)), 'setting');
      $form['#attached']['library'][] = 'surveynodeform/surveynodeform.' . $statename . '.library';
      $form['#attached']['library'][] = 'bootstrap/verticaltabs.library';
    }
    //new state: add form id
    if(($form_id == 'individual_data_node_form' || $form_id == 'individual_data_ma_node_form'|| $form_id == 'individual_data_ga_node_form') && !isset($url['delete']) && !isset($url['provnum'])) { $form['#attached']['library'][] = 'surveynodeform/surveynodeform.library'; }

    if($form_id == 'individual_node_form') { $form['#attached']['library'][] = 'surveynodeform/surveynodeform.library';}
        // drupal_add_js(array('Surveyconfig' => $settings), 'setting');
      $field_name = 'field_YOURFIELD';


    if (empty($form[$field_name])) {
      return;

    }

  $field_language = $form[$field_name]['und'];
  $max_delta = $form[$field_name][$field_language]['#max_delta'];
  unset($form[$field_name][$field_language][$max_delta]);
  }

    //stop any node deletions of state nodes
    //this prevents deletion of Maryland, Mass., and Georgia state nodes.  A bit hacky.  Todo: run a node type test so future states won't get deleted
  if (($form['#id'] == 'views-form-admin-views-node-system-1' && (in_array('116038',$_POST['views_bulk_operations']) || in_array('7',$_POST['views_bulk_operations']) ||in_array('10',$_POST['views_bulk_operations']) ) )|| ($form['#id'] == 'node-delete-confirm' && $path_args[0] == 'node' && is_numeric($path_args[1])  && ($path_args[1] == 116038 ||$path_args[1] == 7 ||$path_args[1] == 10 ) ))
  {
    //set a message...
    drupal_set_message('Warning: don\'t delete states');
    //stop people from being able to submit the delete form (and in turn stop the delete)
    unset($form['actions']['submit']);
    //set the "cancel" link text to something else
    $form['actions']['cancel']['#title'] = t('Don\'t delete states!!! <<< Go back <<<');
  }
}
function getTidByName($name = NULL, $vid = NULL) {
    $properties = [];
    if (!empty($name)) {
      $properties['name'] = $name;
    }
    if (!empty($vid)) {
      $properties['vid'] = $vid;
    }
    $terms = \Drupal::entityManager()->getStorage('taxonomy_term')->loadByProperties($properties);
    $term = reset($terms);

    return !empty($term) ? $term->id() : 0;
  }
// Massachusetts settings

function surveynodeform_get_og_membership_entity_id($ogid) {
  $result = db_query("SELECT og.etid
    FROM {og_membership} og
    WHERE og.id=:ogid
    AND og.entity_type= :entity_type",
    array(
      ':ogid' => $ogid,
      ':entity_type' => 'node',
    )
  );
  $entity_exists = $result->rowCount();
  if ($entity_exists) {
    foreach ($result as $record) {
      return $record->etid;
    }
  }
  return FALSE;
}




function surveynodeform_node_form_redirect($form, &$form_state) {
  $destination = "";
  $current_path = \Drupal::service('path.current')->getPath();
  $path_args = explode('/', $current_path);
    $url = \Drupal::request()->query->all();

  $reportingperiod_id = $url['rp']  ? $url['rp'] : ($form_state['values']['field_reporting_period'] ?	$form_state['values']['field_reporting_period']['und'][0]['target_id'] : null);
  if ($url['p']) {

    if(($form_state['values']['field_cie_individual'] && $form_state['values']['field_cie_individual']['und'][0]['value'] == '1') || ($form_state['values']['field_cie_individual_yes_no'] && $form_state['values']['field_cie_individual_yes_no']['und'][0]['value'] == '1'))
    { $destination = "provider/" . $url['p'] . "/individuals-cie/$reportingperiod_id";
    } else
    {
      $destination = "provider/" . $url['p'] . "/individuals/$reportingperiod_id";
    }

  } elseif($url['delete'] && $url['provnum']) {
    $memberno = $url['delete'];
    $provno = $url['provnum'];
    $reporting_period_id = $url['rp'];
    $destination = "group/node/$provno/admin/people/delete-membership/$memberno/rp/$reportingperiod_id";

  }

  elseif($url['status'] == 'final') {

    $destination = "sdata_rp/submit_data/" . $path_args[1];

  }


  elseif($url['status'] == 'final-cie') {

    $destination = "sdata_rp/submit_data_cie/" . $path_args[1];

  }
  $form_state['redirect'] = $destination;
}

function surveynodeform_theme_registry_alter(&$theme_registry) {
	$theme_registry['print__node__surveyform']['template'] = 'print--node--idd-survey';
	$theme_registry['print__node__surveyform']['path'] = drupal_get_path('module', 'surveynodeform') .'/themes';
}


 function surveynodeform_theme($existing, $type, $theme, $path){

	return array(
		'surveynodeform_form' => array(
			'arguments' => array('form' => null),
			'path' => drupal_get_path('module', 'surveynodeform').'/themes/',
			'template' => 'survey-node-form', //name of your template file, it can be anything
			'render element' => 'form'
		)
	);
}

/* function surveynodeform_preprocess_content_field(&$vars) {
  if ($vars['field']['field_name'] == "field_inventory_price") {
    $vars['label'] = "Test Price";
  }
} */
